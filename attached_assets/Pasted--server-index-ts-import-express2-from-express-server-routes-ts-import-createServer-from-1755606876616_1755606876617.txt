// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// shared/schema.ts
import { sql } from "drizzle-orm";
import { pgTable, text, varchar } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";
var users = pgTable("users", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  username: text("username").notNull().unique(),
  password: text("password").notNull()
});
var insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true
});
var apiRequestSchema = z.object({
  url: z.string().url(),
  method: z.enum(["GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS", "TRACE", "CONNECT"]).default("GET"),
  headers: z.record(z.string()).optional(),
  body: z.string().optional(),
  token: z.string().optional()
});
var customerProfileSchema = z.object({
  customerId: z.string(),
  fullName: z.string(),
  addresses: z.array(z.any()),
  birthDate: z.string().optional(),
  phoneNumber: z.string().optional(),
  email: z.string().optional(),
  latestOrders: z.array(z.any()),
  gender: z.string().optional(),
  registerDate: z.string().optional(),
  totalPurchasesAmount: z.number(),
  totalOrdersCount: z.number().optional(),
  fetchedAt: z.string()
});

// server/routes.ts
import { z as z2 } from "zod";
async function registerRoutes(app2) {
  app2.post("/api/proxy", async (req, res) => {
    try {
      const validatedRequest = apiRequestSchema.parse(req.body);
      const startTime = Date.now();
      const headers = {
        "accept": "application/json, text/plain, */*",
        "origin": "https://new-panel.brandsforlessuae.com",
        "referer": "https://new-panel.brandsforlessuae.com/",
        "user-agent": "Mozilla/5.0 (compatible; API-Tester/1.0)",
        ...validatedRequest.headers
      };
      if (validatedRequest.token) {
        headers["x-access-token"] = validatedRequest.token;
      }
      const fetchOptions = {
        method: validatedRequest.method,
        headers
      };
      if (validatedRequest.body && !["GET", "HEAD", "OPTIONS"].includes(validatedRequest.method)) {
        fetchOptions.body = validatedRequest.body;
        headers["content-type"] = "application/json";
      }
      const response = await fetch(validatedRequest.url, fetchOptions);
      const endTime = Date.now();
      const responseHeadersArray = [];
      response.headers.forEach((value, key) => {
        responseHeadersArray.push([key, value]);
      });
      let data;
      const contentType = response.headers.get("content-type");
      if (contentType && contentType.includes("application/json")) {
        data = await response.json();
      } else {
        data = await response.text();
      }
      const responseHeaders = {};
      response.headers.forEach((value, key) => {
        responseHeaders[key] = value;
      });
      const responseData = {
        status: response.status,
        statusText: response.statusText,
        data,
        headers: responseHeaders,
        responseTime: endTime - startTime,
        size: JSON.stringify(data).length
      };
      res.json(responseData);
    } catch (error) {
      console.log("\u274C ERROR OCCURRED \u274C");
      if (error instanceof z2.ZodError) {
        console.log("\u{1F534} Validation Error:");
        console.log("Error Type: Zod Validation Error");
        console.log("Validation Errors:", JSON.stringify(error.errors, null, 2));
        console.log("Raw Request Body:", JSON.stringify(req.body, null, 2));
        res.status(400).json({
          message: "Invalid request format",
          errors: error.errors
        });
        return;
      }
      if (error instanceof Error) {
        console.log("\u{1F534} General Error:");
        console.log("Error Type:", error.constructor.name);
        console.log("Error Message:", error.message);
        console.log("Error Stack:", error.stack);
        if ("cause" in error) {
          console.log("Error Cause:", error.cause);
        }
        res.status(500).json({
          message: "Request failed",
          error: error.message
        });
        return;
      }
      console.log("\u{1F534} Unknown Error:");
      console.log("Error Type: Unknown");
      console.log("Error Value:", error);
      res.status(500).json({
        message: "Unknown error occurred"
      });
    }
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"]
    }
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(import.meta.dirname, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = parseInt(process.env.PORT || "5000", 10);
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();